# Defines single-line tests of the up-conversion of PMathML to CMathML
#
# Input format is:
#
# LaTeX (interpreted inside $...$)
# EITHER CMathML annotation branch OR !ErrorCode (up-conversion only)
# ==== (divider)
#
# Lines starting with '#' are documentation and are stripped out when running tests
#
## Normal tests
1
<cn>1</cn>
====
\alpha
<ci>&#x3b1;</ci>
=====
x
<ci>x</ci>
====
## Lonely operator should remain unapplied
=
<eq/>
====
x = 3
<apply>
  <eq/>
  <ci>x</ci>
  <cn>3</cn>
</apply>
====
## This invokes the special case of having multiple relations at the same level
a=b=c
<apply>
  <and/>
  <apply>
    <eq/>
    <ci>a</ci>
    <ci>b</ci>
  </apply>
  <apply>
    <eq/>
    <ci>b</ci>
    <ci>c</ci>
  </apply>
</apply>
====
3=
!UCFOP4
====
=3
!UCFOP4
====
+
<plus/>
====
## Prefix plus
+x
<apply>
  <plus/>
  <ci>x</ci>
</apply>
====
## Postfix plus makes no sense
x+
!UCFOP1
====
x+y
<apply>
  <plus/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
-
<minus/>
====
-x
<apply>
  <minus/>
  <ci>x</ci>
</apply>
====
x-
!UCFOP2
====
x-y
<apply>
  <minus/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
-y+x
<apply>
  <plus/>
  <apply>
    <minus/>
    <ci>y</ci>
  </apply>
  <ci>x</ci>
</apply>
====
x-y-z
<apply>
  <minus/>
  <apply>
    <minus/>
    <ci>x</ci>
    <ci>y</ci>
  </apply>
  <ci>z</ci>
</apply>
====
## Basic support for \pm added in SnuggleTeX 1.3.0, even though CMathML doesn't define the operator
1 \pm 2
<apply>
  <csymbol><mo>&#xb1;</mo></csymbol>
  <cn>1</cn>
  <cn>2</cn>
</apply>
====
*
<times/>
====
*1
!UCFOP0
====
1*
!UCFOP1
====
x\times y
<apply>
  <times/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
/
<divide/>
====
1/2
<apply>
  <divide/>
  <cn>1</cn>
  <cn>2</cn>
</apply>
====
/1
!UCFOP0
====
1/
!UCFOP2
====
a/b/c
<apply>
 <divide/>
  <apply>
    <divide/>
    <ci>a</ci>
    <ci>b</ci>
  </apply>
  <ci>c</ci>
</apply>
====
1+x
<apply>
  <plus/>
  <cn>1</cn>
  <ci>x</ci>
</apply>
====
2x
<apply>
  <times/>
  <cn>2</cn>
  <ci>x</ci>
</apply>
====
(2x)
<apply>
  <times/>
  <cn>2</cn>
  <ci>x</ci>
</apply>
====
\sin x
<apply>
  <sin/>
  <ci>x</ci>
</apply>
====
####################################
## More complex tests
2\alpha
<apply>
  <times/>
  <cn>2</cn>
  <ci>&#x3b1;</ci>
</apply>
====
\sin 2x
<apply>
  <sin/>
  <apply>
    <times/>
    <cn>2</cn>
    <ci>x</ci>
  </apply>
</apply>
====
2x+4
<apply>
  <plus/>
  <apply>
    <times/>
    <cn>2</cn>
    <ci>x</ci>
  </apply>
  <cn>4</cn>
</apply>
====
2\alpha - \sin y + x
<apply>
  <plus/>
  <apply>
    <minus/>
    <apply>
      <times/>
      <cn>2</cn>
      <ci>&#x3b1;</ci>
    </apply>
    <apply>
      <sin/>
      <ci>y</ci>
    </apply>
  </apply>
  <ci>x</ci>
</apply>
====
\frac{1}{2}
<apply>
  <divide/>
  <cn>1</cn>
  <cn>2</cn>
</apply>
====
\frac{x+y}{2}
<apply>
  <divide/>
  <apply>
    <plus/>
    <ci>x</ci>
    <ci>y</ci>
  </apply>
  <cn>2</cn>
</apply>
====
2^x
<apply>
  <power/>
  <cn>2</cn>
  <ci>x</ci>
</apply>
====
\sqrt x
<apply>
  <root/>
  <ci>x</ci>
</apply>
====
## Note that the 'x' only binds with the \sqrt below!
\sqrt x y
<apply>
  <times/>
  <apply>
    <root/>
    <ci>x</ci>
  </apply>
  <ci>y</ci>
</apply>
====
\sqrt{b^2-4ac}
<apply>
  <root/>
  <apply>
    <minus/>
    <apply>
      <power/>
      <ci>b</ci>
      <cn>2</cn>
    </apply>
    <apply>
      <times/>
      <cn>4</cn>
      <ci>a</ci>
      <ci>c</ci>
    </apply>
  </apply>
</apply>
====
\frac{-b\pm\sqrt{b^2-4ac}}{2a}
<apply>
  <divide/>
  <apply>
    <csymbol>
      <mo>&#xb1;</mo>
    </csymbol>
    <apply>
      <minus/>
      <ci>b</ci>
    </apply>
    <apply>
      <root/>
      <apply>
        <minus/>
        <apply>
          <power/>
          <ci>b</ci>
          <cn>2</cn>
        </apply>
        <apply>
          <times/>
          <cn>4</cn>
          <ci>a</ci>
          <ci>c</ci>
        </apply>
      </apply>
    </apply>
  </apply>
  <apply>
    <times/>
    <cn>2</cn>
    <ci>a</ci>
  </apply>
</apply>
====
\sqrt[3]{x}
<apply>
  <root/>
  <degree>
    <cn>3</cn>
  </degree>
  <ci>x</ci>
</apply>
====
## Space interpreted as implicit multiplication
x\,y
<apply>
  <times/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
x\,y\,z
<apply>
  <times/>
  <ci>x</ci>
  <ci>y</ci>
  <ci>z</ci>
</apply>
====
\sin\cos x
<apply>
  <sin/>
  <apply>
    <cos/>
    <ci>x</ci>
  </apply>
</apply>
====
## Note how this is different from \sin xy
\sin x\,y
<apply>
  <times/>
  <apply>
    <sin/>
    <ci>x</ci>
  </apply>
  <ci>y</ci>
</apply>
====
\frac{x}{}
!UCFG04
====
## Similarly pathological case!
{}+{}
!UCFG04
====
## Test inference of apply function on inverses
\sin^{-1} x
<apply>
  <arcsin/>
  <ci>x</ci>
</apply>
====
## Test inference of apply function on powers
\sin^{2} x
<apply>
  <apply>
    <power/>
    <sin/>
    <cn>2</cn>
  </apply>
  <ci>x</ci>
</apply>
====
## We don't allow things like this, though.
\sin^n x
!UCFFN2
====
\log_10^n x
!UCFFN2
====
## Natural log
\ln x
<apply>
  <ln/>
  <ci>x</ci>
</apply>
====
## Log to base 10
\log x
<apply>
  <log/>
  <ci>x</ci>
</apply>
====
## Similarly we can let apply function work over subscripted logs, interpreted as bases.
\log_a x
<apply>
  <log/>
  <logbase>
    <ci>a</ci>
  </logbase>
  <ci>x</ci>
</apply>
====
## Log base mixed with powers
\log_a^2 x
<apply>
  <apply>
    <power/>
    <apply>
      <log/>
      <logbase>
        <ci>a</ci>
      </logbase>
    </apply>
    <cn>2</cn>
  </apply>
  <ci>x</ci>
</apply>
====
## Inverse logs aren't allowed!
\ln^{-1} x
!UCFFN1
====
## Unapplied elementary functions
\sin
<sin/>
====
\sin {}
!UCFG04
====
## Erroneous n-ary application of \sin
\sin(x,y)
!UCFFX2
====
\sin^{-1}
<arcsin/>
====
\sin^{-1} {}
!UCFG04
====
!
<factorial/>
====
x!!
<apply>
  <factorial/>
  <apply>
    <factorial/>
    <ci>x</ci>
  </apply>
</apply>
====
x!y!
<apply>
  <times/>
  <apply>
    <factorial/>
    <ci>x</ci>
  </apply>
  <apply>
    <factorial/>
    <ci>y</ci>
  </apply>
</apply>
====
## The ! operator only binds to the preceding item
2x!
<apply>
  <times/>
  <cn>2</cn>
  <apply>
    <factorial/>
    <ci>x</ci>
  </apply>
</apply>
====
## As above
2x!!
<apply>
  <times/>
  <cn>2</cn>
  <apply>
    <factorial/>
    <apply>
      <factorial/>
      <ci>x</ci>
    </apply>
  </apply>
</apply>
====
\sin 2x!
<apply>
  <sin/>
  <apply>
    <times/>
    <cn>2</cn>
    <apply>
      <factorial/>
      <ci>x</ci>
    </apply>
  </apply>
</apply>
====
## This makes no sense!
x^{!}
<apply>
  <power/>
  <ci>x</ci>
  <factorial/>
</apply>
====
## e, i and \pi are treated as a normal identifiers by default.
e
<ci>e</ci>
====
i
<ci>i</ci>
====
\pi
<ci>&#x3c0;</ci>
====
e^x
<apply>
  <power/>
  <ci>e</ci>
  <ci>x</ci>
</apply>
====
## special identifiers
\emptyset
<emptyset/>
====
\infty
<infinity/>
====
## Subscripted identifiers are now handled as mix of CMathML and PMathML
x_1
<ci>
  <msub>
    <mi>x</mi>
    <mn>1</mn>
  </msub>
</ci>
====
## Mismatched fences
\left( x \right]
!UCFG02
====
## Forbidden fence
\setUpConversionOption{roundFenceHandling}{error} $(x,y)$
!UCFG03
====
## Round brackets with more than 1 element become vectors by default
(1,2)
<vector>
  <cn>1</cn>
  <cn>2</cn>
</vector>
====
## Square brackets become lists by default
[1,2]
<list>
  <cn>1</cn>
  <cn>2</cn>
</list>
====
## Curly brackets become sets by default
\{1,2\}
<set>
  <cn>1</cn>
  <cn>2</cn>
</set>
====
[[a,b],c]
<list>
  <list>
    <ci>a</ci>
    <ci>b</ci>
  </list>
  <ci>c</ci>
</list>
====
## Special units handling
\units{kg}
<semantics definitionURL="http://www.ph.ed.ac.uk/snuggletex/units">
  <csymbol>kg</csymbol>
</semantics>
====
##########################
## Infix as prefix handling
1++x
<apply>
  <plus/>
  <cn>1</cn>
  <apply>
    <plus/>
    <ci>x</ci>
  </apply>
</apply>
====
1+-x
<apply>
  <plus/>
  <cn>1</cn>
  <apply>
    <minus/>
    <ci>x</ci>
  </apply>
</apply>
====
1+++x
<apply>
  <plus/>
  <cn>1</cn>
  <apply>
    <plus/>
    <apply>
      <plus/>
      <ci>x</ci>
    </apply>
  </apply>
</apply>
====
1+*x
!UCFOP0
====
x==y
!UCFOP4
====
x==
!UCFOP4
====
==
!UCFOP4
====
=!
!UCFOP4
====
!!
!UCFOP5
====
--
!UCFOP2
====
x!
<apply>
  <factorial/>
  <ci>x</ci>
</apply>
====
\neg
<not/>
====
\neg A
<apply>
  <not/>
  <ci>A</ci>
</apply>
====
\neg \neg A
<apply>
  <not/>
  <apply>
    <not/>
    <ci>A</ci>
  </apply>
</apply>
====
\neg \neg
!UCFOP5
====
\neg \neg \neg
!UCFOP5
====
A \land B \lor C
<apply>
  <or/>
  <apply>
    <and/>
    <ci>A</ci>
    <ci>B</ci>
  </apply>
  <ci>C</ci>
</apply>
====
\neg (A \vee B)
<apply>
  <not/>
  <apply>
    <or/>
    <ci>A</ci>
    <ci>B</ci>
  </apply>
</apply>
====
A \land \lnot B
<apply>
  <and/>
  <ci>A</ci>
  <apply>
    <not/>
    <ci>B</ci>
  </apply>
</apply>
====
\land\land
!UCFOP1
====
## 2 or more relation operators at same level get converted into booleans and relations!
1 < 2 = 3
<apply>
  <and/>
  <apply>
    <lt/>
    <cn>1</cn>
    <cn>2</cn>
  </apply>
  <apply>
    <eq/>
    <cn>2</cn>
    <cn>3</cn>
  </apply>
</apply>
====
<
<lt/>
====
>
<gt/>
====
<<
!UCFOP4
====
## Notted relations
\not =
<neq/>
====
## (CMathML doesn't have a 'not less than' operator so we need to synthesise one)
\not <
<apply>
  <not/>
  <lt/>
</apply>
====
1 \not = 2
<apply>
  <neq/>
  <cn>1</cn>
  <cn>2</cn>
</apply>
====
a \not< b \not> c \not\leq d \not\geq f
<apply>
  <and/>
  <apply>
    <not/>
    <apply>
      <lt/>
      <ci>a</ci>
      <ci>b</ci>
    </apply>
  </apply>
  <apply>
    <not/>
    <apply>
      <gt/>
      <ci>b</ci>
      <ci>c</ci>
    </apply>
  </apply>
  <apply>
    <not/>
    <apply>
      <leq/>
      <ci>c</ci>
      <ci>d</ci>
    </apply>
  </apply>
  <apply>
    <not/>
    <apply>
      <geq/>
      <ci>d</ci>
      <ci>f</ci>
    </apply>
  </apply>
</apply>
====
a \equiv b
<apply>
  <equivalent/>
  <ci>a</ci>
  <ci>b</ci>
</apply>
====
a \not\equiv b
<apply>
  <not/>
  <apply>
    <equivalent/>
    <ci>a</ci>
    <ci>b</ci>
  </apply>
</apply>
====
a \approx b
<apply>
  <approx/>
  <ci>a</ci>
  <ci>b</ci>
</apply>
====
a \not\approx b
<apply>
  <not/>
  <apply>
    <approx/>
    <ci>a</ci>
    <ci>b</ci>
  </apply>
</apply>
====
a \equiv b
<apply>
  <equivalent/>
  <ci>a</ci>
  <ci>b</ci>
</apply>
====
a\in A
<apply>
  <in/>
  <ci>a</ci>
  <ci>A</ci>
</apply>
====
a\not\in A
<apply>
  <notin/>
  <ci>a</ci>
  <ci>A</ci>
</apply>
====
|
<factorof/>
====
# CMathML doesn't have a "not factor of" operator so we need to synthesise one
\not|
<apply>
  <not/>
  <factorof/>
</apply>
====
a|b
<apply>
  <factorof/>
  <ci>a</ci>
  <ci>b</ci>
</apply>
====
a\not|b
<apply>
  <not/>
  <apply>
    <factorof/>
    <ci>a</ci>
    <ci>b</ci>
  </apply>
</apply>
====
a|bc
<apply>
  <factorof/>
  <ci>a</ci>
  <apply>
    <times/>
    <ci>b</ci>
    <ci>c</ci>
  </apply>
</apply>
====
A\subset B\subseteq C \not\subset D \not\subseteq E
<apply>
  <and/>
  <apply>
    <prsubset/>
    <ci>A</ci>
    <ci>B</ci>
  </apply>
  <apply>
    <subset/>
    <ci>B</ci>
    <ci>C</ci>
  </apply>
  <apply>
    <notprsubset/>
    <ci>C</ci>
    <ci>D</ci>
  </apply>
  <apply>
    <notsubset/>
    <ci>D</ci>
    <ci>E</ci>
  </apply>
</apply>
====
x \rightarrow 1
<apply>
  <tendsto/>
  <ci>x</ci>
  <cn>1</cn>
</apply>
====
A \Rightarrow B
<apply>
  <implies/>
  <ci>A</ci>
  <ci>B</ci>
</apply>
====
## More set theory
A \cup B
<apply>
  <union/>
  <ci>A</ci>
  <ci>B</ci>
</apply>
====
A \cup x+A
<apply>
  <union/>
  <ci>A</ci>
  <apply>
    <plus/>
    <ci>x</ci>
    <ci>A</ci>
  </apply>
</apply>
====
A \cup B \cap C
<apply>
  <union/>
  <ci>A</ci>
  <apply>
    <intersect/>
    <ci>B</ci>
    <ci>C</ci>
  </apply>
</apply>
====
A \cup B \setminus C
<apply>
  <union/>
  <ci>A</ci>
  <apply>
    <setdiff/>
    <ci>B</ci>
    <ci>C</ci>
  </apply>
</apply>
====
\cup
<union/>
====
\cap
<intersect/>
====
\setminus
<setdiff/>
====
## Comma operator
a,b
<list>
  <ci>a</ci>
  <ci>b</ci>
</list>
====
x_{1,2}
<ci>
  <msub>
    <mi>x</mi>
    <mfenced open='' close=''>
      <mn>1</mn>
      <mn>2</mn>
    </mfenced>
  </msub>
</ci>
====
## Other functions
\Re x
<apply>
  <real/>
  <ci>x</ci>
</apply>
====
\Re x \Im y
<apply>
  <times/>
  <apply>
    <real/>
    <ci>x</ci>
  </apply>
  <apply>
    <imaginary/>
    <ci>y</ci>
  </apply>
</apply>
====
\det A
<apply>
  <determinant/>
  <ci>A</ci>
</apply>
====
\gcd(x,y)
<apply>
  <gcd/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
\lcm(x,y)
<apply>
  <lcm/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
\min A
<apply>
  <min/>
  <ci>A</ci>
</apply>
====
## Note n-ary application here
\min(x,y)
<apply>
  <min/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
\max(x,y)
<apply>
  <max/>
  <ci>x</ci>
  <ci>y</ci>
</apply>
====
## Assumption fun
f
<ci>f</ci>
====
\assumeSymbol{f}{function} $f$
<ci type="function">f</ci>
====
f(x)
<apply><times/><ci>f</ci><ci>x</ci></apply>
====
\assumeSymbol{f}{function} $f(x)$
<apply><ci type="function">f</ci><ci>x</ci></apply>
====
\assumeSymbol{f}{function} $f^{-1}$
<apply>
  <inverse/>
  <ci type="function">f</ci>
</apply>
====
\assumeSymbol{f}{function} $f^{2}$
<apply>
  <power/>
  <ci type="function">f</ci>
  <cn>2</cn>
</apply>
====
\assumeSymbol{f}{function} $f^{-1}(x)$
<apply>
  <apply>
    <inverse/>
    <ci type="function">f</ci>
  </apply>
  <ci>x</ci>
</apply>
====
\assumeSymbol{f}{function} $f^{2}(x)$
<apply>
  <apply>
    <power/>
    <ci type="function">f</ci>
    <cn>2</cn>
  </apply>
  <ci>x</ci>
</apply>
====
\assumeSymbol{f}{function} $f^n(x)$
!UCFFN2
====
\assumeSymbol{f}{function} $f^f$
!UCFFN2
====
\assumeSymbol{f_n}{function} $f_n$
<ci type="function"><msub><mi>f</mi><mi>n</mi></msub></ci>
====
\assumeSymbol{f_n}{function} $f_n(x)$
<apply><ci type="function"><msub><mi>f</mi><mi>n</mi></msub></ci><ci>x</ci></apply>
====
\assumeSymbol{e}{exponentialNumber} $e$
<exponentiale/>
====
\assumeSymbol{e}{exponentialNumber} $e^x$
<apply>
  <exp/>
  <ci>x</ci>
</apply>
====
\assumeSymbol{i}{imaginaryNumber} $i$
<imaginaryi/>
====
\assumeSymbol{\pi}{constantPi} $\pi$
<pi/>
====
\assumeSymbol{\gamma}{eulerGamma} $\gamma$
<eulergamma/>
====
\setUpConversionOption{roundFenceHandling}{list} $(1,2)$
<list>
  <cn>1</cn>
  <cn>2</cn>
</list>
====
