<?xml version="1.0"?>

<!-- ======================================================================= -->
<!-- Ant Build File for SnuggleTeX Project                                   -->
<!--                                                                         -->
<!-- $Id$                      -->
<!-- ======================================================================= -->
<project name="SnuggleTeX" default="build" basedir=".">

  <!-- General Properties file defining the layout of the project -->
  <property file="build.properties"/>

  <!-- Defines version number properties -->
  <property file="version.properties"/>

  <!-- =================================================================== -->
  <!-- Usual Ant initialisation target                                     -->
  <!-- =================================================================== -->
  <target name="init">
    <tstamp/>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares the build and generated source directories.                -->
  <!-- =================================================================== -->
  <target name="prepare.dirs" depends="init">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.lib.dir}"/>
    <mkdir dir="${build.src.dir}"/>
    <mkdir dir="${build.test.dir}"/>
    <mkdir dir="${build.webapp.dir}"/>
    <mkdir dir="${dist.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Builds the main SnuggleTeX Java files                               -->
  <!-- =================================================================== -->
  <target name="build" depends="prepare.dirs">
    <!-- Compile Java files -->
    <javac destdir="${build.src.dir}"
        debug="true"
        source="1.5"
        target="1.5"
        deprecation="on">
      <compilerarg value="-Xlint:all"/>
      <src path="${src.dir}"/>
    </javac>
    <!-- Copy non-Java files -->
    <copy todir="${build.src.dir}">
      <fileset dir="${src.dir}">
        <exclude name="**/*.java"/>
      </fileset>
      <filterset>
        <filtersfile file="version.properties"/>
      </filterset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Builds the SnuggleTeX JAR                                           -->
  <!-- =================================================================== -->
  <target name="snuggletex.jar" depends="build" description="Builds SnuggleTeX JAR">
    <jar destfile="${dist.dir}/snuggletex.jar" index="true">
      <fileset dir="${build.src.dir}"/>
    </jar>
  </target>


  <!-- =================================================================== -->
  <!-- Creates the default SnuggleTeX CSS                                  -->
  <!--                                                                     -->
  <!-- (We only do this if the source css.properties file has changed)     -->
  <!-- =================================================================== -->
  <target name="css.check">
    <uptodate property="css.uptodate"
      srcfile="${src.dir}/uk/ac/ed/ph/snuggletex/css.properties"
      targetfile="${dist.dir}/snuggletex.css"/>
  </target>

  <target name="snuggletex.css" depends="build, css.check" unless="css.uptodate"
      description="Builds SnuggleTeX CSS">
    <echo>Building snuggletex.css from css.properties</echo>
    <java classname="uk.ac.ed.ph.snuggletex.CSSUtilities">
      <arg value="${dist.dir}/snuggletex.css"/>
      <classpath path="${build.src.dir}"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Prepares 3rd party libraries, flattening the vendor/version         -->
  <!-- hierarchy that we use to make it easier to reference them.          -->
  <!-- =================================================================== -->
  <target name="prepare.libs" depends="prepare.dirs">
    <copy todir="${build.lib.dir}" flatten="true">
      <fileset dir="${lib.dir}">
        <include name="**/*.jar"/>
        <exclude name="**/src.jar"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- ClassPath for the Test Suite                                        -->
  <!-- =================================================================== -->
  <path id="test.libs.classpath">
    <pathelement location="${build.lib.dir}/junit-4.4.jar"/>
    <pathelement location="${build.lib.dir}/easymock.jar"/>
  </path>

  <!-- =================================================================== -->
  <!-- Compiles the Java test code                                         -->
  <!-- =================================================================== -->
  <target name="build.test" depends="prepare.libs, build">
    <javac destdir="${build.test.dir}"
        debug="true"
        source="1.5"
        target="1.5"
        deprecation="on">
      <compilerarg value="-Xlint:all"/>
      <classpath refid="test.libs.classpath"/>
      <classpath path="${build.src.dir}"/>
      <src path="${test.dir}"/>
    </javac>
    <!-- Copy non-Java files -->
    <copy todir="${build.test.dir}">
      <fileset dir="${test.dir}">
        <exclude name="**/*.java"/>
      </fileset>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the JUnit Test Suite                                           -->
  <!-- =================================================================== -->
  <target name="test" depends="build.test" description="Runs Test Suite">
    <java classname="org.junit.runner.JUnitCore" fork="yes">
      <arg value="uk.ac.ed.ph.snuggletex.SnuggleTeXTestSuite"/>
      <classpath refid="test.libs.classpath"/>
      <classpath path="${build.test.dir}"/>
      <classpath path="${build.src.dir}"/>
    </java>
  </target>

  <!-- =================================================================== -->
  <!-- Runs the JUnit Test Suite                                           -->
  <!-- =================================================================== -->
  <target name="javadoc" description="Builds JavaDoc">
    <javadoc sourcepath="${src.dir}" packagenames="uk.ac.ed.ph.snuggletex.*"
      destdir="${build.javadoc.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Required libraries for compiling the demo webapp                    -->
  <!-- =================================================================== -->
  <path id="webapp.libs.classpath">
    <pathelement location="${build.lib.dir}/servlet-api.jar"/>
  </path>

  <!-- =================================================================== -->
  <!-- Builds the demo webapp hierarchy                                    -->
  <!-- =================================================================== -->
  <target name="webapp" depends="prepare.libs, build, snuggletex.jar, snuggletex.css, javadoc"
      description="Builds demo webapp">
    <mkdir dir="${build.webapp.dir}/WEB-INF"/>
    <mkdir dir="${build.webapp.dir}/WEB-INF/classes"/>
    <!-- Compile webapp -->
    <javac destdir="${build.webapp.dir}/WEB-INF/classes"
        debug="true"
        source="1.5"
        target="1.5"
        deprecation="on">
      <compilerarg value="-Xlint:all"/>
      <classpath refid="webapp.libs.classpath"/>
      <classpath path="${build.src.dir}"/>
      <src path="${webapp.java.dir}"/>
    </javac>
    <!-- Copy in static files, being careful with filtering -->
    <copy todir="${build.webapp.dir}">
      <fileset dir="${webapp.dir}">
        <exclude name="java/**"/>
        <exclude name="**/*.xsl"/>
      </fileset>
    </copy>
    <copy todir="${build.webapp.dir}">
      <fileset dir="${webapp.dir}">
        <exclude name="java/**"/>
        <include name="**/*.xsl"/>
      </fileset>
      <filterset>
        <filtersfile file="version.properties"/>
      </filterset>
    </copy>
    <!-- Add in snuggletex.jar + Saxon 9 JARs. We're supplying an explicit XSLT
    implementation here in order to avoid potential problems. (For example, Tomcat
    on some Linux distros comes with a half-arsed XML configuration that doesn't work
    out of the box! -->
    <copy todir="${build.webapp.dir}/WEB-INF/lib">
      <fileset dir="${dist.dir}">
        <include name="snuggletex.jar"/>
      </fileset>
      <fileset dir="${build.lib.dir}">
        <include name="saxon9.jar"/>
        <include name="saxon9-dom.jar"/>
      </fileset>
    </copy>
    <!-- Merge in CSS -->
    <copy todir="${build.webapp.dir}/includes" file="${dist.dir}/snuggletex.css"/>
    <!-- Copy in JavaDoc -->
    <copy todir="${build.webapp.dir}/javadoc">
      <fileset dir="${build.javadoc.dir}"/>
    </copy>
  </target>

  <!-- =================================================================== -->
  <!-- Builds the demo webapp WAR, ready for deployment into a servlet     -->
  <!-- container (e.g. Tomcat).                                            -->
  <!-- =================================================================== -->
  <target name="webapp.war" depends="webapp" description="Builds demo webapp WAR">
    <jar destfile="${dist.dir}/snuggletex.war" basedir="${build.webapp.dir}"/>
  </target>

  <!-- =================================================================== -->
  <!-- Builds distributions for depositing to SourceForge.net              -->
  <!-- =================================================================== -->
  <target name="dist.src" depends="prepare.dirs" description="Builds source distribution ZIP">
    <zip destfile="${dist.dir}/snuggletex-${uk.ac.ed.ph.snuggletex.version}-src.zip">
      <zipfileset dir="${basedir}" prefix="snuggletex-${uk.ac.ed.ph.snuggletex.version}">
        <include name="build.properties"/>
        <include name="build.xml"/>
        <include name=".classpath"/>
        <include name="LICENSE.txt"/>
        <include name=".project"/>
        <include name=".settings"/>
        <include name="lib/**"/>
        <include name="src/**"/>
        <include name="test/**"/>
        <include name="demowebapp/**"/>
      </zipfileset>
    </zip>
  </target>

  <target name="src.zip">
    <zip destfile="${dist.dir}/src.zip" basedir="${src.dir}"/>
  </target>

  <target name="dist.bin" depends="snuggletex.jar, snuggletex.css, src.zip, javadoc"
      description="Builds binary distribution ZIP">
    <zip destfile="${dist.dir}/snuggletex-${uk.ac.ed.ph.snuggletex.version}.zip">
      <zipfileset prefix="snuggletex-${uk.ac.ed.ph.snuggletex.version}" file="LICENSE.txt"/>
      <zipfileset prefix="snuggletex-${uk.ac.ed.ph.snuggletex.version}" dir="${dist.dir}">
        <include name="snuggletex.jar"/>
        <include name="snuggletex.css"/>
        <include name="src.zip"/>
      </zipfileset>
      <zipfileset prefix="snuggletex-${uk.ac.ed.ph.snuggletex.version}/javadoc" dir="${build.javadoc.dir}">
        <include name="**"/>
      </zipfileset>
    </zip>
  </target>

  <target name="dist" depends="dist.src, dist.bin" description="Builds distribution ZIPs"/>

  <!-- =================================================================== -->
  <!-- Aardvark Intergration Target (not useful in general)                -->
  <!-- =================================================================== -->

  <target name="snuggletex.aardvark.jar" depends="build" description="Builds SnuggleTeX JAR (without Aardvark components)">
    <echo>(This target is only useful if you are integrating SnuggleTeX with other Aardvark components)</echo>
    <jar destfile="${dist.dir}/snuggletex-for-aardvark.jar" index="true">
      <fileset dir="${build.src.dir}">
        <exclude name="uk/ac/ed/ph/aardvark/**"/>
      </fileset>
    </jar>
  </target>

  <!-- =================================================================== -->
  <!-- Cleans up the build directories                                     -->
  <!-- =================================================================== -->
  <target name="clean" description="Cleans out build directories">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

</project>
